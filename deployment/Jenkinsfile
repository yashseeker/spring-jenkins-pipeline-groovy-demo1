pipeline {
    agent any
    
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "mvn"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git url: 'https://github.com/yashseeker/spring-jenkins-pipeline-groovy-demo1.git'

                // Run Maven on a Unix agent.
                script{
                if(isUnix()){
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
				}	
                else{
                 bat "mvn -Dmaven.test.failure.ignore=true clean package"
                 }
                 }
            }
            }
            
           
           
         stage('Integration Test') {
            steps {
               
                // Run Maven on a Unix agent.
                script{
                if(isUnix()){
                sh "mvn -Dmaven.test.failure.ignore=true clean verify"
				}	
                else{
                 bat "mvn -Dmaven.test.failure.ignore=true clean verify"
                 }
                 }
            }
        
    	}
    	stage('Docker Build'){
            steps{
                 script{
                if(isUnix()){
                    sh "docker build --file DockerFile -t yashpandeywork/spring-jenkins-ci-cd:latest ."
				}	
                else{
                    bat "docker build --file DockerFile -t yashpandeywork/spring-jenkins-ci-cd:latest ."
                 }
                }
            }
        }
         stage('Docker Push'){
            steps{
                 
                    withCredentials([usernamePassword(credentialsId:'dockerHub',passwordVariable: 'dockerHubPassword',usernameVariable:'dockerHubUser')]){
                    bat "docker login -u ${env.dockerHubUser} -p${env.dockerHubPassword}"
                    bat "docker push yashpandeywork/spring-jenkins-ci-cd:latest"
                
                 }
                }
        }
         stage('Deploy to K8s Cluster'){
            steps{
                script{
                    kubernetesDeploy(configs:"k8s/deployment.yaml","k8s/service.yaml")
                }
            }
         }
    }
     post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    jacoco(
                    
                    classPattern: '**/target/classes',
                    sourcePattern: '**/src/main/groovy'
                    
                    )
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.jar'
                    
                }
            }
}

    
            
        

